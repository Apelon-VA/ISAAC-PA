<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>gov.va.isaac.isaac-pa</groupId>
		<artifactId>isaac-pa-parent</artifactId>
		<version>1.0-Sprint_15-SNAPSHOT</version>
	</parent>
	<groupId>gov.va.isaac.isaac-pa.modules</groupId>
	<artifactId>app</artifactId>
	<packaging>pom</packaging>

	<name>ISAAC Application Assembly</name>
	<description>Assembles specified ISAAC modules and configuration into an application.</description>

	<dependencies>

		<!-- Configuration module. -->
		<dependency>
			<groupId>gov.va.isaac.isaac-pa.modules</groupId>
			<artifactId>config</artifactId>
			<version>${project.parent.version}</version>
		</dependency>

		<!-- ISAAC Application GUI. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>isaac-app</artifactId>
			<version>${isaac.version}</version>
		</dependency>

		<!-- ISAAC Import Export. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>import-export</artifactId>
			<version>${isaac.version}</version>
		</dependency>

		<!-- ISAAC Content request. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>content-request</artifactId>
			<version>${isaac.version}</version>
		</dependency>
	
		<!-- ISAAC Classifier. -->
		<!-- disabled for the moment -->
		<!--dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>isaac-classifier</artifactId>
			<version>${isaac.version}</version>
		</dependency-->

		<!-- ISAAC Taxonomy View. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>taxonomy-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- ISAAC Search View. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>search-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>
	
		<!-- ISAAC Lego View. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>lego-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- ISAAC Info Model View. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>info-model-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- ISAAC List / Batch View. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>list-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- Workflow View. -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>isaac-workflow</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- Sync GUI integration -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>sync-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- Only one of the following is required - GIT or SVN - but no harm comes from having both
		  the correct implementation will be selected based on the sync configuration in app.xml - changeSetUrlType parameter  -->
		<!-- Sync GIT integration -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>sync-git</artifactId>
			<version>${isaac.version}</version>
		</dependency>
		
		<!-- Sync SVN integration -->
		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>sync-svn</artifactId>
			<version>${isaac.version}</version>
		</dependency>

		<dependency>
			<groupId>gov.va.isaac.modules</groupId>
			<artifactId>concept-wizard-view</artifactId>
			<version>${isaac.version}</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Configure logging for the mojo code we will hit. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<goals>
							<goal>set-system-properties</goal>
						</goals>
						<configuration>
							<properties>
								<property>
									<name>logback.configurationFile</name>
									<value>${project.basedir}/logback.xml</value>
								</property>
							</properties>
						</configuration>
					</execution>
				</executions>
			</plugin>
		
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>zip</id>
						<goals>
							<goal>single</goal>
						</goals>
						<phase>compile</phase> <!-- Other package phases need this - so do it during compile -->
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/assembly/assembly.xml</descriptor>
							</descriptors>
							<finalName>isaac-app</finalName>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
	<profiles>
		<!-- If a user wants to just build the small zip, and not do any DB stuff, they should set the parameter '-DskipDB' -->
		<profile>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>!skipDB</name>  <!-- Hack maven, which still doesn't allow chaining of profiles.  What year is this? -->
				</property>
			</activation>
			<id>zipWithDB</id>
			<build>
				<plugins>
					<!-- Unpack isaac-app.zip file, which was created up above - contains the entire app deployment, minus the DB and users. -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>truezip-maven-plugin</artifactId>
						<version>1.2</version>
						<executions>
							<execution>
								<id>unpack-isaac-zip</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>cp</goal>
								</goals>
								<configuration>
									<from>${project.build.directory}/isaac-app.zip</from>
									<to>${project.build.directory}/isaac-app</to>
								</configuration>
							</execution>
						</executions>
					</plugin>
				
					<!-- Unpack database, and configuration details -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack-db-and-users</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
									<!-- unzip the config module, so we can get the users.xml file out of it -->
										<artifactItem>
											<groupId>gov.va.isaac.isaac-pa.modules</groupId>
											<artifactId>config</artifactId>
											<version>${project.parent.version}</version>
											<outputDirectory>${project.build.directory}/config/</outputDirectory>
										</artifactItem>
										
										<!-- The database to start with -->
										<artifactItem>
											<groupId>gov.va.isaac.db</groupId>
											<artifactId>solor-snomed</artifactId>
											<version>2014.11.12</version>
											<classifier>active-only</classifier>
											<type>bdb.zip</type>
											<outputDirectory>${project.build.directory}/isaac-app/</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					
					<plugin>
						<groupId>gov.va.isaac.modules</groupId>
						<artifactId>mojos</artifactId>
						<version>${isaac.version}</version>
						<executions>
						
							<!-- See https://raw.githubusercontent.com/IHTSDO/ISAAC/master/mojos/src/main/java/gov/va/isaac/mojos/profileSync/ProfilesMojoBase.java 
								for details on how authentication is handled for this.  This execution only runs if changeSetUrl and changeSetUrlType are defined in app.xml 
								To skip SCM steps for profiles entirely, specify '-DprofileSyncDisable=true'
							-->
							<execution>
								<id>get-and-link-profile-scm</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>get-and-link-profile-scm</goal>
								</goals>
								<configuration>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
									<appXMLFile>${project.build.directory}/config/app.xml</appXMLFile>
									<!--Depending on the SCM implementation, there are multiple ways to handle this auth, see comments above-->
									<!--profileSyncUsername></profileSyncUsername>  
									<profileSyncPassword></profileSyncPassword-->
								</configuration>
							</execution>
						
							<!-- generate user profiles -->
							<execution>
								<id>setup</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>setup-terminology-store</goal>
								</goals>
								<configuration>
									<bdbFolderLocation>${project.build.directory}/isaac-app/</bdbFolderLocation>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
								</configuration>
							</execution>

							<execution>
								<id>create-users</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>create-users</goal>
								</goals>
								<configuration>
									<usersFileLocation>${project.build.directory}/config/users.xml</usersFileLocation>
								</configuration>
							</execution>
							
							<!-- See https://raw.githubusercontent.com/IHTSDO/ISAAC/master/mojos/src/main/java/gov/va/isaac/mojos/profileSync/ProfilesMojoBase.java 
								for details on how authentication is handled for this.  This execution only runs if changeSetUrl and changeSetUrlType are defined in app.xml
								To skip SCM steps for profiles entirely, specify '-DprofileSyncDisable=true'
							-->
							<execution>
								<id>add-commit-and-push-profile-scm</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>add-commit-and-push-profile-scm</goal>
								</goals>
								<configuration>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
									<appXMLFile>${project.build.directory}/config/app.xml</appXMLFile>
									<!--Depending on the SCM implementation, there are multiple ways to handle this auth, see comments above-->
									<!--profileSyncUsername></profileSyncUsername>  
									<profileSyncPassword></profileSyncPassword-->
								</configuration>
							</execution>

							<!-- Process any existing changeset (*.eccs) files into the DB -->
							<execution>
								<id>process-changesets</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>process-changesets</goal>
								</goals>
								<configuration>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
								</configuration>
							</execution>

							<execution>
								<id>shutdown</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>shutdown-terminology-store</goal>
								</goals>
								<configuration>
									<moveToReadOnly>false</moveToReadOnly>
								</configuration>
							</execution>
						</executions>

					</plugin>
					
					<!-- Package into a ZIP file with the DB. -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<id>zip-with-DB</id>
								<goals>
									<goal>attached</goal>
								</goals>
								<phase>package</phase>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/assembly/assembly-withDB.xml</descriptor>
									</descriptors>
									<finalName>isaac-app</finalName>
									<classifier>with-DB</classifier>
								</configuration>
							</execution>
						</executions>
					</plugin>
					
				</plugins>
			</build>
			
		</profile>
		
		<profile>
			<!-- This profile depends on zipWithDB being run -->
			<id>installer</id>
			<build>
				<plugins>
					<!-- Create filtered Install4J configuration. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.6</version>
						<executions>
							<execution>
								<id>install4j-resources</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/install4j</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/main/install4j</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					
					<plugin>
						<groupId>com.google.code.maven-install4j</groupId>
						<artifactId>maven-install4j-plugin</artifactId>
						<version>0.1.1</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>compile</goal>
								</goals>
								<configuration>
									<configFile>${project.build.directory}/install4j/Installer.install4j</configFile>
									<executable>install4jc</executable>
									<compilerVariables>
										<property>
											<name>project.version</name>
											<value>${project.version}</value>
										</property>
									</compilerVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
					
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>attach-installers</id>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${project.build.directory}/install4j/isaac-app_macos_${project.version}.dmg</file>
											<type>dmg</type>
											<classifier>installer_x64</classifier>
										</artifact>
										<artifact>
											<file>${project.build.directory}/install4j/isaac-app_windows-x64_${project.version}.exe</file>
											<type>exe</type>
											<classifier>installer_x64</classifier>
										</artifact>
										<artifact>
											<file>${project.build.directory}/install4j/isaac-app_unix_${project.version}.sh</file>
											<type>sh</type>
											<classifier>installer_x64</classifier>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
